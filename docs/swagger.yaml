basePath: /api/v1
definitions:
  app.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      msg:
        type: string
    type: object
  dto_request.CourseContentRequestDto:
    properties:
      description:
        type: string
      lectureUrl:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  dto_request.CourseEnrollDto:
    properties:
      course_id:
        type: integer
    type: object
  dto_request.CourseRequestDto:
    properties:
      course_contents:
        items:
          $ref: '#/definitions/dto_request.CourseContentRequestDto'
        type: array
      description:
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  dto_request.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto_request.RefreshTokenRequestDto:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto_request.UserRegistrationDto:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:4000
info:
  contact: {}
  description: Online Course API
  license: {}
  title: Online Course API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: loginDto
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto_request.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Login API
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Logout API
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      parameters:
      - description: refreshTokenRequestDto
        in: body
        name: refreshTokenRequestDto
        required: true
        schema:
          $ref: '#/definitions/dto_request.RefreshTokenRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Refresh Token API
      tags:
      - auth
  /course-enrolls:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
      summary: Find Course Enrolls API
      tags:
      - course-enrolls
    post:
      consumes:
      - application/json
      parameters:
      - description: courseEnrollDto
        in: body
        name: courseEnrollDto
        required: true
        schema:
          $ref: '#/definitions/dto_request.CourseEnrollDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Course Enroll API
      tags:
      - course-enrolls
  /course-enrolls/{courseEnrollId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Course Enroll ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
      summary: Find Course By Find Course Enroll By ID API
      tags:
      - course-enrolls
  /courses:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
      summary: Find Courses API
      tags:
      - courses
    post:
      consumes:
      - application/json
      parameters:
      - description: courseDto
        in: body
        name: courseDto
        required: true
        schema:
          $ref: '#/definitions/dto_request.CourseRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Create Course API
      tags:
      - courses
  /courses/{courseId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
      summary: Delete Course API
      tags:
      - courses
    get:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/app.Response'
      summary: Find Course By CourseID API
      tags:
      - courses
  /users/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: userRegistrationDto
        in: body
        name: userRegistrationDto
        required: true
        schema:
          $ref: '#/definitions/dto_request.UserRegistrationDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
      summary: User Registration API
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
